C51 COMPILER V9.01   MAIN                                                                  07/31/2022 15:28:52 PAGE 1   


C51 COMPILER V9.01, COMPILATION OF MODULE MAIN
OBJECT MODULE PLACED IN main.OBJ
COMPILER INVOKED BY: D:\keil4\C51\BIN\C51.EXE main.c BROWSE INCDIR(.\SRC;.\18b20) DEBUG OBJECTEXTEND

line level    source

   1          //////////////////////////////////////////////////////////////////////////////////       
   2          //本程序只供学习使用，未经作者许可，不得用于其它任何用途
   3          //中景园电子
   4          
   5          //Copyright(C) 中景园电子2014/3/16
   6          //All rights reserved
   7          //******************************************************************************/
   8          #include "stc8.h"
   9          #include "oled.h"
  10          
  11          #include <stdlib.h>
  12          
  13          extern const unsigned char code COVER[] ;
  14          
  15          
  16          
  17          sbit key1 = P5^4;
  18          sbit key2 = P5^5;
  19          
  20          sbit buzz = P3^0;
  21          
  22          
  23          unsigned char get_key_val()
  24          {
  25   1              unsigned char key_num = 0;
  26   1              if (key1 == 0)
  27   1              {
  28   2                      key_num = 1;
  29   2                      /*
  30   2                      delay1ms(10);
  31   2                      if (key1 == 0)
  32   2                      {
  33   2                              key_num = 1;
  34   2                      }*/
  35   2              }
  36   1              else if (key2 == 0)
  37   1              {
  38   2                      key_num = 2;
  39   2                      /*
  40   2                      delay1ms(10);
  41   2                      if (key2 == 0)
  42   2                      {
  43   2                              key_num = 2;
  44   2                      }*/
  45   2              }       
  46   1              return key_num;
  47   1      }
  48          
  49                    
  50          
  51          
  52          
  53          
  54          void TM1_Isr() interrupt 3 
  55          { 
C51 COMPILER V9.01   MAIN                                                                  07/31/2022 15:28:52 PAGE 2   

  56   1         buzz = ~buzz;
  57   1      }
  58           int main(void)
  59           {      
  60   1          unsigned char key_num = 0;
  61   1              char sound_flag = 0;
  62   1              unsigned char cactus_category = 0;
  63   1              unsigned char cactus_length = 8;
  64   1              unsigned int score = 0;
  65   1              unsigned int highest_score = 0;
  66   1              char height = 0;
  67   1              int cactus_pos = 128;   
  68   1              unsigned char cur_speed = 30;
  69   1              char failed = 0;
  70   1              char reset = 0;
  71   1                      
  72   1      
  73   1      
  74   1                      P3M0 = 0x00;
  75   1              P3M1 = 0x00;
  76   1                      P5M0 = 0x00;
  77   1              P5M1 = 0x00;
  78   1      
  79   1      
  80   1                      OLED_Init();  //初始化OLED 
  81   1      
  82   1      
  83   1                  TMOD = 0x00; 
  84   1              TL1  = 0xAE; 
  85   1              TH1  = 0xFB; 
  86   1                      TF1 = 0;                //清除TF1标志
  87   1              TR1  = 1; //启动定时器
  88   1              ET1  = 0; //使能定时器中断
  89   1              EA = 1;
  90   1      
  91   1                      
  92   1                      OLED_DrawBMP(0,0,128,8,COVER); 
  93   1                      while(get_key_val()==0);
  94   1                      delay_ms(100);
  95   1                      OLED_Clear();
  96   1              while(1) 
  97   1              {       
  98   2                      if (failed == 1)
  99   2                      {
 100   3                              draw_restart();
 101   3                              if(sound_flag == 1)
 102   3                              {
 103   4                                      ET1 = 1;
 104   4                                      delay_ms(10);
 105   4                                      ET1 = 0;                        
 106   4                                      delay_ms(10);
 107   4                                      ET1 = 1;
 108   4                                      delay_ms(10);
 109   4                                      ET1 = 0;                        
 110   4                                      delay_ms(10);                           
 111   4                                      sound_flag = 0;
 112   4                              }
 113   3                              
 114   3                              key_num = get_key_val();
 115   3                              if (key_num == 2)
 116   3                              {
 117   4                                      if(score > highest_score) highest_score = score;
C51 COMPILER V9.01   MAIN                                                                  07/31/2022 15:28:52 PAGE 3   

 118   4                                      score = 0;
 119   4                                      failed = 0;
 120   4                                      height = 0;
 121   4                                      reset = 1;
 122   4                                      oled_draw_dino_jump(reset);
 123   4                                      oled_draw_cactus_random(cactus_category, reset);
 124   4                                      fill_picture(0x00);
 125   4                              }
 126   3                              continue;
 127   3                      }               
 128   2                      
 129   2      
 130   2                      score ++;
 131   2                      if (height == 0) key_num = get_key_val();
 132   2                      
 133   2                      oled_draw_ground();
 134   2                      oled_draw_cloud();
 135   2                      //oled_draw_dino();
 136   2                      //oled_draw_dino_jump(0);
 137   2                      //oled_draw_cactus();
 138   2                      
 139   2                      if (height>0 || key_num > 0) height = oled_draw_dino_jump(reset);
 140   2                      else oled_draw_dino();
 141   2                      
 142   2                      cactus_pos = oled_draw_cactus_random(cactus_category, reset);
 143   2                      if(cactus_category == 0) cactus_length = 8;
 144   2                      else if(cactus_category == 1) cactus_length = 16;
 145   2                      else cactus_length = 24;
 146   2                      
 147   2                      if (cactus_pos + cactus_length < 0) 
 148   2                      {
 149   3                        cactus_category = rand()%4;   //4
 150   3                              oled_draw_cactus_random(cactus_category, 1);
 151   3                      }               
 152   2                      
 153   2                      if ((height < 16) && ( (cactus_pos>=16 && cactus_pos <=32) || (cactus_pos + cactus_length>=16 && cactus_
             -pos + cactus_length <=32)))
 154   2                      {
 155   3                              failed = 1;
 156   3                              sound_flag = 1;
 157   3                      }               
 158   2                      
 159   2                      OLED_ShowString(35, 0, "HI:", 12);
 160   2                      OLED_ShowNum(58, 0, highest_score, 5, 12);
 161   2                      OLED_ShowNum(98, 0, score, 5, 12);
 162   2                      if (score % 100 == 0) ET1 = 1;
 163   2                      else{ 
 164   3                              ET1 = 0;
 165   3                      }
 166   2              
 167   2                      reset = 0;
 168   2                      
 169   2                      cur_speed = score/20;
 170   2                      if (cur_speed > 49) cur_speed = 49;
 171   2                      delay_ms(50 - cur_speed);
 172   2                      //delay_ms(100);    
 173   2                      
 174   2              }         
 175   1              
 176   1      
 177   1      }         
 178                  
C51 COMPILER V9.01   MAIN                                                                  07/31/2022 15:28:52 PAGE 4   

 179          
 180                  


MODULE INFORMATION:   STATIC OVERLAYABLE
   CODE SIZE        =    527    ----
   CONSTANT SIZE    =      4    ----
   XDATA SIZE       =   ----    ----
   PDATA SIZE       =   ----    ----
   DATA SIZE        =   ----      14
   IDATA SIZE       =   ----    ----
   BIT SIZE         =   ----    ----
END OF MODULE INFORMATION.


C51 COMPILATION COMPLETE.  0 WARNING(S),  0 ERROR(S)
